#!/usr/bin/env bash
#=============================================================================
# Copyright 2010-2012 Kitware, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#=============================================================================

die() {
	echo 'pre-commit hook failure' 1>&2
	echo '-----------------------' 1>&2
	echo '' 1>&2
	echo "$@" 1>&2
	exit 1
}

# Hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.

#-----------------------------------------------------------------------------
# Check for committer identity.
advice='
Use the commands
	git config --global user.name '\''Your Name'\''
	git config --global user.email '\''you@yourdomain.com'\''
to introduce yourself to Git before committing.'

# Ensure name and email are available.
git config --get user.name > /dev/null &&
git config --get user.email > /dev/null ||
die 'Identity not configured!' "$advice"

# Validate the name and email.
git config --get user.name | grep ' ' > /dev/null ||
die 'Set user.name to your Real Name (with a space), not a userid.' "$advice"
git config --get user.email | grep '^[^@]*@[^@]*$' > /dev/null ||
die 'Set user.email to an email address (userid@validdomain.com).' "$advice"

#-----------------------------------------------------------------------------
# Check content that will be added by this commit.
if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

#-----------------------------------------------------------------------------
# Make sure GIT_DIR is set.
if test -z "$GIT_DIR"; then
    export GIT_DIR=$(git rev-parse --git-dir)
fi

#-----------------------------------------------------------------------------
# Style hooks.
. "$GIT_DIR/../cmake/Hooks/pre-commit-style.bash"

#-----------------------------------------------------------------------------
# Builtin whitespace checks.
bad=$(git diff-index --check --cached $against --) || die "$bad"

# Approximate whitespace=tab-in-indent check with Git < 1.7.2.
git --version | grep -q " \(1\.[0-6]\|1\.7\.[01]\)" &&
approx_tab_in_indent=true || approx_tab_in_indent=false
check_tab() {
	lines=$(git diff-index -p --cached $against -- "$1" |
	        grep '^+	') &&
	echo "$lines" |
	while read line; do
		echo "$1: tab in indent." &&
		echo "$line"
	done
}

# Reject addition of a line without a newline at end-of-file.
check_no_lf_at_eof() {
	lines=$(git diff-index -p --cached $against -- "$1" | tail -2)
	if echo "$lines" | head -1 | grep -q '^+' &&
	   echo "$lines" | tail -1 | grep -q '^\\ No newline'; then
		echo "$1: No newline at end of file"
	fi
}

# Custom whitespace checks.
check_whitespace() {
	ws=$(git check-attr whitespace -- "$file" |
	     sed 's/^[^:]*: whitespace: //')
	if $approx_tab_in_indent; then
		case ",$ws," in
			*,tab-in-indent,*) check_tab "$1" ;;
		esac
	fi
	case ",$ws," in
		*,no-lf-at-eof,*) check_no_lf_at_eof "$1" ;;
	esac
}
bad=$(git diff-index --name-only --cached $against -- |
while read file; do
	check_whitespace "$file"
done)
test -z "$bad" || die "$bad"


# vim: set filetype=sh tabstop=8 softtabstop=8 shiftwidth=8 noexpandtab :
